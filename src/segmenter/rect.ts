// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.20.3
// source: rect.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "mediapipe";

/** A rectangle with rotation in image coordinates. */
export interface Rect {
  /**
   * Location of the center of the rectangle in image coordinates.
   * The (0, 0) point is at the (top, left) corner.
   */
  xCenter: number;
  yCenter: number;
  /** Size of the rectangle. */
  height: number;
  width: number;
  /** Rotation angle is clockwise in radians. */
  rotation?:
    | number
    | undefined;
  /** Optional unique id to help associate different Rects to each other. */
  rectId?: number | undefined;
}

/**
 * A rectangle with rotation in normalized coordinates. The values of box center
 * location and size are within [0, 1].
 */
export interface NormalizedRect {
  /**
   * Location of the center of the rectangle in image coordinates.
   * The (0.0, 0.0) point is at the (top, left) corner.
   */
  xCenter: number;
  yCenter: number;
  /** Size of the rectangle. */
  height: number;
  width: number;
  /** Rotation angle is clockwise in radians. */
  rotation?:
    | number
    | undefined;
  /**
   * Optional unique id to help associate different NormalizedRects to each
   * other.
   */
  rectId?: number | undefined;
}

function createBaseRect(): Rect {
  return { xCenter: 0, yCenter: 0, height: 0, width: 0, rotation: 0, rectId: 0 };
}

export const Rect: MessageFns<Rect> = {
  encode(message: Rect, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.xCenter !== 0) {
      writer.uint32(8).int32(message.xCenter);
    }
    if (message.yCenter !== 0) {
      writer.uint32(16).int32(message.yCenter);
    }
    if (message.height !== 0) {
      writer.uint32(24).int32(message.height);
    }
    if (message.width !== 0) {
      writer.uint32(32).int32(message.width);
    }
    if (message.rotation !== undefined && message.rotation !== 0) {
      writer.uint32(45).float(message.rotation);
    }
    if (message.rectId !== undefined && message.rectId !== 0) {
      writer.uint32(48).int64(message.rectId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Rect {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRect();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.xCenter = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.yCenter = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.height = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.width = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 45) {
            break;
          }

          message.rotation = reader.float();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.rectId = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Rect {
    return {
      xCenter: isSet(object.xCenter) ? globalThis.Number(object.xCenter) : 0,
      yCenter: isSet(object.yCenter) ? globalThis.Number(object.yCenter) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      rotation: isSet(object.rotation) ? globalThis.Number(object.rotation) : 0,
      rectId: isSet(object.rectId) ? globalThis.Number(object.rectId) : 0,
    };
  },

  toJSON(message: Rect): unknown {
    const obj: any = {};
    if (message.xCenter !== 0) {
      obj.xCenter = Math.round(message.xCenter);
    }
    if (message.yCenter !== 0) {
      obj.yCenter = Math.round(message.yCenter);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    if (message.rotation !== undefined && message.rotation !== 0) {
      obj.rotation = message.rotation;
    }
    if (message.rectId !== undefined && message.rectId !== 0) {
      obj.rectId = Math.round(message.rectId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Rect>, I>>(base?: I): Rect {
    return Rect.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Rect>, I>>(object: I): Rect {
    const message = createBaseRect();
    message.xCenter = object.xCenter ?? 0;
    message.yCenter = object.yCenter ?? 0;
    message.height = object.height ?? 0;
    message.width = object.width ?? 0;
    message.rotation = object.rotation ?? 0;
    message.rectId = object.rectId ?? 0;
    return message;
  },
};

function createBaseNormalizedRect(): NormalizedRect {
  return { xCenter: 0, yCenter: 0, height: 0, width: 0, rotation: 0, rectId: 0 };
}

export const NormalizedRect: MessageFns<NormalizedRect> = {
  encode(message: NormalizedRect, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.xCenter !== 0) {
      writer.uint32(13).float(message.xCenter);
    }
    if (message.yCenter !== 0) {
      writer.uint32(21).float(message.yCenter);
    }
    if (message.height !== 0) {
      writer.uint32(29).float(message.height);
    }
    if (message.width !== 0) {
      writer.uint32(37).float(message.width);
    }
    if (message.rotation !== undefined && message.rotation !== 0) {
      writer.uint32(45).float(message.rotation);
    }
    if (message.rectId !== undefined && message.rectId !== 0) {
      writer.uint32(48).int64(message.rectId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NormalizedRect {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNormalizedRect();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 13) {
            break;
          }

          message.xCenter = reader.float();
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.yCenter = reader.float();
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.height = reader.float();
          continue;
        }
        case 4: {
          if (tag !== 37) {
            break;
          }

          message.width = reader.float();
          continue;
        }
        case 5: {
          if (tag !== 45) {
            break;
          }

          message.rotation = reader.float();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.rectId = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NormalizedRect {
    return {
      xCenter: isSet(object.xCenter) ? globalThis.Number(object.xCenter) : 0,
      yCenter: isSet(object.yCenter) ? globalThis.Number(object.yCenter) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      rotation: isSet(object.rotation) ? globalThis.Number(object.rotation) : 0,
      rectId: isSet(object.rectId) ? globalThis.Number(object.rectId) : 0,
    };
  },

  toJSON(message: NormalizedRect): unknown {
    const obj: any = {};
    if (message.xCenter !== 0) {
      obj.xCenter = message.xCenter;
    }
    if (message.yCenter !== 0) {
      obj.yCenter = message.yCenter;
    }
    if (message.height !== 0) {
      obj.height = message.height;
    }
    if (message.width !== 0) {
      obj.width = message.width;
    }
    if (message.rotation !== undefined && message.rotation !== 0) {
      obj.rotation = message.rotation;
    }
    if (message.rectId !== undefined && message.rectId !== 0) {
      obj.rectId = Math.round(message.rectId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<NormalizedRect>, I>>(base?: I): NormalizedRect {
    return NormalizedRect.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<NormalizedRect>, I>>(object: I): NormalizedRect {
    const message = createBaseNormalizedRect();
    message.xCenter = object.xCenter ?? 0;
    message.yCenter = object.yCenter ?? 0;
    message.height = object.height ?? 0;
    message.width = object.width ?? 0;
    message.rotation = object.rotation ?? 0;
    message.rectId = object.rectId ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
