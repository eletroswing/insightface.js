// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.20.3
// source: external_file.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "mediapipe.tasks.core.proto";

/**
 * Represents external files used by the engines (e.g. TF Lite flatbuffers). The
 * files can be specified by one of the following three ways:
 *
 * (1) file contents loaded in `file_content`.
 * (2) file path in `file_name`.
 * (3) file descriptor through `file_descriptor_meta` as returned by open(2).
 * (4) file pointer and length in memory through `file_pointer_meta`.
 *
 * If more than one field of these fields is provided, they are used in this
 * precedence order.
 * Next id: 5
 */
export interface ExternalFile {
  /** The file contents as a byte array. */
  fileContent?:
    | Uint8Array
    | undefined;
  /** The path to the file to open and mmap in memory */
  fileName?:
    | string
    | undefined;
  /**
   * The file descriptor to a file opened with open(2), with optional additional
   * offset and length information.
   */
  fileDescriptorMeta?:
    | FileDescriptorMeta
    | undefined;
  /**
   * The pointer points to location of a file in memory. Use the util method,
   * `SetExternalFile` in [1], to configure `file_pointer_meta` from a
   * `std::string_view` object.
   *
   * [1]: mediapipe/tasks/cc/metadata/utils/zip_utils.h
   */
  filePointerMeta?: FilePointerMeta | undefined;
}

/**
 * A proto defining file descriptor metadata for mapping file into memory using
 * mmap(2).
 */
export interface FileDescriptorMeta {
  /** File descriptor as returned by open(2). */
  fd?:
    | number
    | undefined;
  /**
   * Optional length of the mapped memory. If not specified, the actual file
   * size is used at runtime.
   *
   * This is an advanced option, e.g. this can be used on Android to specify the
   * length of a given asset obtained from AssetFileDescriptor#getLength().
   */
  length?:
    | number
    | undefined;
  /**
   * Optional starting offset in the file referred to by the file descriptor
   * `fd`.
   *
   * This is an advanced option, e.g. this can be used on Android to specify the
   * offset of a given asset obtained from AssetFileDescriptor#getStartOffset().
   */
  offset?: number | undefined;
}

/**
 * The pointer points to location of a file in memory. Make sure the file memory
 * that it points locates on the same machine and it outlives this
 * FilePointerMeta object.
 */
export interface FilePointerMeta {
  /** Memory address of the file in decimal. */
  pointer?:
    | number
    | undefined;
  /** File length. */
  length?: number | undefined;
}

function createBaseExternalFile(): ExternalFile {
  return { fileContent: new Uint8Array(0), fileName: "", fileDescriptorMeta: undefined, filePointerMeta: undefined };
}

export const ExternalFile: MessageFns<ExternalFile> = {
  encode(message: ExternalFile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fileContent !== undefined && message.fileContent.length !== 0) {
      writer.uint32(10).bytes(message.fileContent);
    }
    if (message.fileName !== undefined && message.fileName !== "") {
      writer.uint32(18).string(message.fileName);
    }
    if (message.fileDescriptorMeta !== undefined) {
      FileDescriptorMeta.encode(message.fileDescriptorMeta, writer.uint32(26).fork()).join();
    }
    if (message.filePointerMeta !== undefined) {
      FilePointerMeta.encode(message.filePointerMeta, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExternalFile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExternalFile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fileContent = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fileName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.fileDescriptorMeta = FileDescriptorMeta.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.filePointerMeta = FilePointerMeta.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExternalFile {
    return {
      fileContent: isSet(object.fileContent) ? bytesFromBase64(object.fileContent) : new Uint8Array(0),
      fileName: isSet(object.fileName) ? globalThis.String(object.fileName) : "",
      fileDescriptorMeta: isSet(object.fileDescriptorMeta)
        ? FileDescriptorMeta.fromJSON(object.fileDescriptorMeta)
        : undefined,
      filePointerMeta: isSet(object.filePointerMeta) ? FilePointerMeta.fromJSON(object.filePointerMeta) : undefined,
    };
  },

  toJSON(message: ExternalFile): unknown {
    const obj: any = {};
    if (message.fileContent !== undefined && message.fileContent.length !== 0) {
      obj.fileContent = base64FromBytes(message.fileContent);
    }
    if (message.fileName !== undefined && message.fileName !== "") {
      obj.fileName = message.fileName;
    }
    if (message.fileDescriptorMeta !== undefined) {
      obj.fileDescriptorMeta = FileDescriptorMeta.toJSON(message.fileDescriptorMeta);
    }
    if (message.filePointerMeta !== undefined) {
      obj.filePointerMeta = FilePointerMeta.toJSON(message.filePointerMeta);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExternalFile>, I>>(base?: I): ExternalFile {
    return ExternalFile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExternalFile>, I>>(object: I): ExternalFile {
    const message = createBaseExternalFile();
    message.fileContent = object.fileContent ?? new Uint8Array(0);
    message.fileName = object.fileName ?? "";
    message.fileDescriptorMeta = (object.fileDescriptorMeta !== undefined && object.fileDescriptorMeta !== null)
      ? FileDescriptorMeta.fromPartial(object.fileDescriptorMeta)
      : undefined;
    message.filePointerMeta = (object.filePointerMeta !== undefined && object.filePointerMeta !== null)
      ? FilePointerMeta.fromPartial(object.filePointerMeta)
      : undefined;
    return message;
  },
};

function createBaseFileDescriptorMeta(): FileDescriptorMeta {
  return { fd: 0, length: 0, offset: 0 };
}

export const FileDescriptorMeta: MessageFns<FileDescriptorMeta> = {
  encode(message: FileDescriptorMeta, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fd !== undefined && message.fd !== 0) {
      writer.uint32(8).int32(message.fd);
    }
    if (message.length !== undefined && message.length !== 0) {
      writer.uint32(16).int64(message.length);
    }
    if (message.offset !== undefined && message.offset !== 0) {
      writer.uint32(24).int64(message.offset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FileDescriptorMeta {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileDescriptorMeta();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.fd = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.length = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.offset = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FileDescriptorMeta {
    return {
      fd: isSet(object.fd) ? globalThis.Number(object.fd) : 0,
      length: isSet(object.length) ? globalThis.Number(object.length) : 0,
      offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
    };
  },

  toJSON(message: FileDescriptorMeta): unknown {
    const obj: any = {};
    if (message.fd !== undefined && message.fd !== 0) {
      obj.fd = Math.round(message.fd);
    }
    if (message.length !== undefined && message.length !== 0) {
      obj.length = Math.round(message.length);
    }
    if (message.offset !== undefined && message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FileDescriptorMeta>, I>>(base?: I): FileDescriptorMeta {
    return FileDescriptorMeta.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FileDescriptorMeta>, I>>(object: I): FileDescriptorMeta {
    const message = createBaseFileDescriptorMeta();
    message.fd = object.fd ?? 0;
    message.length = object.length ?? 0;
    message.offset = object.offset ?? 0;
    return message;
  },
};

function createBaseFilePointerMeta(): FilePointerMeta {
  return { pointer: 0, length: 0 };
}

export const FilePointerMeta: MessageFns<FilePointerMeta> = {
  encode(message: FilePointerMeta, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pointer !== undefined && message.pointer !== 0) {
      writer.uint32(8).uint64(message.pointer);
    }
    if (message.length !== undefined && message.length !== 0) {
      writer.uint32(16).int64(message.length);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FilePointerMeta {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilePointerMeta();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pointer = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.length = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FilePointerMeta {
    return {
      pointer: isSet(object.pointer) ? globalThis.Number(object.pointer) : 0,
      length: isSet(object.length) ? globalThis.Number(object.length) : 0,
    };
  },

  toJSON(message: FilePointerMeta): unknown {
    const obj: any = {};
    if (message.pointer !== undefined && message.pointer !== 0) {
      obj.pointer = Math.round(message.pointer);
    }
    if (message.length !== undefined && message.length !== 0) {
      obj.length = Math.round(message.length);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FilePointerMeta>, I>>(base?: I): FilePointerMeta {
    return FilePointerMeta.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FilePointerMeta>, I>>(object: I): FilePointerMeta {
    const message = createBaseFilePointerMeta();
    message.pointer = object.pointer ?? 0;
    message.length = object.length ?? 0;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
